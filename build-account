#!/usr/bin/zsh
set -euo pipefail
setopt EXTENDED_GLOB
set -x

if [[ $(id -u -n) != liam ]]; then
    echo 'must be run as liam'
    exit 1
fi

if [[ $HOME != '/home/liam' ]]; then
  echo "\$HOME=$HOME"
  echo "expected /home/liam"
  exit 1
fi

cd "$HOME"

git config --global pull.rebase false
git config --global --add push.default current
git config --global --add --bool push.autoSetupRemote true
git config --global branch.autoSetupMerge true
git config --global user.name "Liam Bowen"
git config --global user.email "LiamBowen@gmail.com"
git config --global init.defaultBranch main

if [[ ! -d "$HOME/build-machine" ]]; then
    git clone \
        https://github.com/hut8/build-machine \
        "$HOME/build-machine"
    (cd build-machine && git remote set-url origin git@github.com:hut8/build-machine)
else
  (cd "$HOME/build-machine" && git pull)
fi


mkdir -p "$HOME/.ssh"
curl https://github.com/hut8.keys > \
  "$HOME/.ssh/authorized_keys"
chmod 0600 "$HOME/.ssh/authorized_keys"

# Prezto
if [[ ! -d "$HOME/.zprezto" ]]; then
  echo 'installing prezto'
    git clone --recursive \
        https://github.com/hut8/prezto.git \
        "${ZDOTDIR:-$HOME}/.zprezto"

    for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
        rm -f "${ZDOTDIR:-$HOME}/.${rcfile:t}"
        ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
    done
fi

# Go
PATH="/usr/local/go/bin:$PATH"
if type go &> /dev/null;
then
    go install golang.org/x/tools/gopls@latest
    go install honnef.co/go/tools/cmd/staticcheck@latest
    go install github.com/google/gops@latest
fi

# Rust
if [[ ! -d "$HOME/.cargo" ]]; then
  echo 'installing rust'
  curl 'https://sh.rustup.rs' -sSf | sh -s -- -y
  source $HOME/.cargo/env
  rustup component add rust-src
fi

# ASDF
(( +commands[asdf] )) || (
  [[ ! -d "$HOME/.asdf" ]] && \
    git clone https://github.com/asdf-vm/asdf.git "$HOME/.asdf"
  set +u
  source "$HOME/.asdf/asdf.sh"
  set -u
  asdf plugin add ruby || true
  asdf install ruby latest || true
  asdf global ruby latest || true
  asdf plugin add nodejs || true
  asdf install nodejs latest || true
  asdf global nodejs latest || true
)

# Starship prompt
(( $+commands[starship] )) || (
  echo "installing starship"
  [[ -d "$HOME/starship" ]] || git clone https://github.com/starship/starship
  cd "$HOME/starship"
  cargo build --release
  sudo ln -f 'target/release/starship' '/usr/local/bin/starship'
)

# Nushell config
mkdir -p "$HOME/.config/nushell"
for f in config.nu env.nu starship.nu ; do
  echo "linking nushell config: $f"
  ln -f "$HOME/build-machine/$f" "$HOME/.config/nushell/$f"
done

# starship config
echo "linking starship config"
ln -f "$HOME/build-machine/starship.toml" "$HOME/.config/starship.toml"

# Various config files to be hardlinked
for f in .sqliterc .tmux.conf .pryrc .p10k.zsh .asdfrc ; do
  echo "linking dotfile: $f"
  ln -f "$HOME/build-machine/$f" "$HOME/$f"
done

# emacs
if [[ ! -d "$HOME/.emacs.d/.git" ]]; then
  echo "cloning prelude"
  git clone https://github.com/hut8/prelude "$HOME/.emacs.d"
  (cd "$HOME/.emacs.d"; git remote set-url origin git@github.com:hut8/prelude)
else
  echo "updating prelude"
  (cd "$HOME/.emacs.d"; git pull)
fi

pipx install litecli
pipx install pgcli
pipx install mycli

# bat - the cat replacement
(( $+commands[bat] )) || cargo install --locked bat
# just - task runner
(( $+commands[just] )) || cargo install --locked just
# wasmpack
(( $+commands[wasm-pack] )) || (
  curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
)
# du-dust
(( $+commands[dust] )) || cargo install du-dust

# Fly.io
(( $+commands[fly] )) || (curl -L https://fly.io/install.sh | sh)
